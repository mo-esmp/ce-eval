{
  "openapi": "3.0.1",
  "info": {
    "title": "ChannelEngine Merchant API",
    "description": "ChannelEngine API for merchants",
    "version": "2.9.9"
  },
  "servers": [
    {
      "url": "https://api-dev.channelengine.net/api"
    }
  ],
  "paths": {
    "/v2/cancellations": {
      "post": {
        "tags": [
          "Cancellation"
        ],
        "summary": "Create Cancellation.",
        "description": "Mark (part of) an order as cancelled.",
        "operationId": "CancellationCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantCancellationRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantCancellationRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantCancellationRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channels.",
        "description": "Get all channels (excluding deleted ones).<br />You can use the returned ids to query the listed products for this channel from the ListedProducts endpoint.",
        "operationId": "Channel PluginsGet",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfChannelGlobalChannelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/competitionprices/buyboxprices": {
      "get": {
        "tags": [
          "CompetitionPrice"
        ],
        "summary": "Get the BuyBox winner prices",
        "description": "Get the current price of the BuyBox winner per product for a channel.",
        "operationId": "CompetitionPricesGetBuyBoxPrices",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The id of the channel",
            "schema": {
              "type": "integer",
              "description": "The id of the channel",
              "format": "int32"
            }
          },
          {
            "name": "gtinList",
            "in": "query",
            "description": "Search products by submitting a list of GTIN's. (optional)<br />Max. 2000.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Search products by submitting a list of GTIN's. (optional)\r\nMax. 2000.",
              "nullable": true
            }
          },
          {
            "name": "skuList",
            "in": "query",
            "description": "Search products by submitting a list of Sku's. (optional)<br />Max. 2000. If GtinList is already set, this one is ignored.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Search products by submitting a list of Sku's. (optional)\r\nMax. 2000. If GtinList is already set, this one is ignored.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductWithBuyBoxPrice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/channels/{channelId}/products": {
      "get": {
        "tags": [
          "ListedProducts"
        ],
        "summary": "Get Listed Products",
        "description": "Gets the status of products listed for channel (export status) and on a channel (channel status).<br />Includes products that were previously deleted from but are now set to be created again.<br />Note: not all channels provide adequate options to retrieve the status on the channel.",
        "operationId": "Listed ProductGetByFilter",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The id of a channel",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of a channel",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfChannelListedProductResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/notifications": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get Notifications.",
        "description": "Gets all notifications based on filter.",
        "operationId": "NotificationIndex",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the notification date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "description": "Filter on the notification date, starting from this date. This date is inclusive.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the notification date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "description": "Filter on the notification date, until this date. This date is exclusive.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Notification type(s) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NotificationType"
              },
              "description": "Notification type(s) to filter on.",
              "nullable": true
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the channel.",
              "nullable": true
            }
          },
          {
            "name": "merchantReturnNos",
            "in": "query",
            "description": "Filter on unique return reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique return reference used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "channelReturnNos",
            "in": "query",
            "description": "Filter on unique return reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique return reference used by the channel.",
              "nullable": true
            }
          },
          {
            "name": "merchantShipmentNos",
            "in": "query",
            "description": "Filter on unique shipment reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique shipment reference used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantNotificationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/offer": {
      "put": {
        "tags": [
          "Offer"
        ],
        "summary": "Update stock and/or price.",
        "description": "Update stock and/or price of product(s).",
        "operationId": "OfferStockPriceUpdate",
        "requestBody": {
          "description": "References to the products that should be updated, and the new values<br />for the stock or price fields. It is possible to supply only one of the two fields<br />or both.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantStockPriceUpdateRequest"
                },
                "description": "References to the products that should be updated, and the new values\r\nfor the stock or price fields. It is possible to supply only one of the two fields\r\nor both."
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantStockPriceUpdateRequest"
                },
                "description": "References to the products that should be updated, and the new values\r\nfor the stock or price fields. It is possible to supply only one of the two fields\r\nor both."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantStockPriceUpdateRequest"
                },
                "description": "References to the products that should be updated, and the new values\r\nfor the stock or price fields. It is possible to supply only one of the two fields\r\nor both."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfDictionaryOfStringAndListOfString"
                }
              }
            }
          }
        }
      }
    },
    "/v2/offer/stock": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "Get stock for products.",
        "description": "Get stock of products at stock location(s).",
        "operationId": "OfferGetStock",
        "parameters": [
          {
            "name": "skus",
            "in": "query",
            "description": "List of your products' sku's.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of your products' sku's."
            }
          },
          {
            "name": "stockLocationIds",
            "in": "query",
            "description": "The ChannelEngine id of the stock location(s).",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The ChannelEngine id of the stock location(s)."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantOfferGetStockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Orders By Filter.",
        "description": "Fetch orders based on the provided OrderFilter.",
        "operationId": "OrderGetByFilter",
        "parameters": [
          {
            "name": "statuses",
            "in": "query",
            "description": "Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrderStatusView"
              },
              "description": "Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.",
              "nullable": true
            }
          },
          {
            "name": "emailAddresses",
            "in": "query",
            "description": "Client emailaddresses to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Client emailaddresses to filter on.",
              "nullable": true
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the channel.",
              "nullable": true
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the order date, starting from this date. This date is inclusive.<br />The order date is based on the data we got from a channel.",
            "schema": {
              "type": "string",
              "description": "Filter on the order date, starting from this date. This date is inclusive.\r\nThe order date is based on the data we got from a channel.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the order date, until this date. This date is exclusive.<br />The order date is based on the data we got from a channel.",
            "schema": {
              "type": "string",
              "description": "Filter on the order date, until this date. This date is exclusive.\r\nThe order date is based on the data we got from a channel.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "fromCreatedAtDate",
            "in": "query",
            "description": "Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.<br />The created date is set on the date and time when the order is created.",
            "schema": {
              "type": "string",
              "description": "Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.\r\nThe created date is set on the date and time when the order is created.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toCreatedAtDate",
            "in": "query",
            "description": "Filter on the created at date in ChannelEngine, until this date. This date is exclusive.<br />The created date is set on the date and time when the order is created.",
            "schema": {
              "type": "string",
              "description": "Filter on the created at date in ChannelEngine, until this date. This date is exclusive.\r\nThe created date is set on the date and time when the order is created.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "excludeMarketplaceFulfilledOrdersAndLines",
            "in": "query",
            "description": "Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)",
            "schema": {
              "type": "boolean",
              "description": "Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)"
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.<br />To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FulfillmentType"
                }
              ],
              "description": "Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.\r\nTo exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true."
            }
          },
          {
            "name": "onlyWithCancellationRequests",
            "in": "query",
            "description": "Filter on orders containing cancellation requests.<br />Some channels allow a customer to cancel an order until it has been shipped.<br />When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.",
            "schema": {
              "type": "boolean",
              "description": "Filter on orders containing cancellation requests.\r\nSome channels allow a customer to cancel an order until it has been shipped.\r\nWhen an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation."
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter orders on channel(s).",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filter orders on channel(s).",
              "nullable": true
            }
          },
          {
            "name": "stockLocationIds",
            "in": "query",
            "description": "Filter on stock locations",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filter on stock locations",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/new": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get New Orders.",
        "description": "Fetch newly placed orders (order with status NEW).",
        "operationId": "OrderGetNew",
        "parameters": [
          {
            "name": "stockLocationId",
            "in": "query",
            "description": "The ChannelEngine id of the stock location.",
            "schema": {
              "type": "integer",
              "description": "The ChannelEngine id of the stock location.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/acknowledge": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Acknowledge Order.",
        "description": "Acknowledge an order. By acknowledging the order the merchant can confirm that<br />the order has been imported. When acknowledging an order the merchant has to supply<br />references that uniquely identify the order and the order lines. These references<br />will be used in the other API calls.",
        "operationId": "OrderAcknowledge",
        "requestBody": {
          "description": "Relations between the id's returned by ChannelEngine and the references which the merchant uses.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantOrderAcknowledgementRequest"
                  }
                ],
                "description": "Relations between the id's returned by ChannelEngine and the references which the merchant uses.",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantOrderAcknowledgementRequest"
                  }
                ],
                "description": "Relations between the id's returned by ChannelEngine and the references which the merchant uses.",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantOrderAcknowledgementRequest"
                  }
                ],
                "description": "Relations between the id's returned by ChannelEngine and the references which the merchant uses.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantOrderNo}/invoice": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Download Invoice.",
        "description": "Generates the ChannelEngine VAT invoice for this order in PDF.",
        "operationId": "OrderInvoice",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The unique order reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique order reference as used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "useCustomerCulture",
            "in": "query",
            "description": "Generate the invoice in the billing address' country's language.",
            "schema": {
              "type": "boolean",
              "description": "Generate the invoice in the billing address' country's language.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "file",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantOrderNo}/packingslip": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Download Packing Slip.",
        "description": "Generates the ChannelEngine packing slip for this order in PDF.",
        "operationId": "OrderPackingSlip",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The unique order reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique order reference as used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "useCustomerCulture",
            "in": "query",
            "description": "Generate the invoice in the billing address' country's language.",
            "schema": {
              "type": "boolean",
              "description": "Generate the invoice in the billing address' country's language.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packing Slip PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "file",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/comment": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Comment.",
        "description": "Update the merchant comment for an order. Either the ChannelEngine order id or the<br />merchant order number can be used for updating a comment.",
        "operationId": "OrderUpdate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantOrderCommentUpdateRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantOrderCommentUpdateRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantOrderCommentUpdateRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Upsert Products.",
        "description": "Upsert (update or create) products. The parent serves as the 'base' product of the children.<br />For example, the children could be different sizes or colors of the parent product.<br />For channels where every size and color are different products this does not make any difference<br />(the children will just be sent separately, while ignoring the parent).<br />But there are channels where the parent and the children need to be sent together, for example<br />when there is one product with a list of sizes. In this case all the product information is retrieved<br />from the parent product while the size list is generated from the children.<br /> <br />Note that the parent itself is a 'blueprint' of the child products and we do our best to make sure it<br />does not end up on the marketplaces itself. Only the children can be purchased.<br /> <br />It's not possible to nest parent and children more than one level (A parent can have many children,<br />but any child cannot itself also have children).<br /> <br />The supplied MerchantProductNo needs to be unique.",
        "operationId": "ProductCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MerchantProductRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Products.",
        "description": "Retrieve all products.",
        "operationId": "ProductGetByFilter",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search product(s) by Name, MerchantProductNo, Ean or Brand<br />This search is applied to the result after applying the other filters.",
            "schema": {
              "type": "string",
              "description": "Search product(s) by Name, MerchantProductNo, Ean or Brand\r\nThis search is applied to the result after applying the other filters.",
              "nullable": true
            }
          },
          {
            "name": "eanList",
            "in": "query",
            "description": "Search products by submitting a list of EAN's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Search products by submitting a list of EAN's.",
              "nullable": true
            }
          },
          {
            "name": "merchantProductNoList",
            "in": "query",
            "description": "Search products by submitting a list of MerchantProductNo's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Search products by submitting a list of MerchantProductNo's.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "summary": "Bulk Patch Products",
        "description": "This endpoint allows you to update multiple fields on a multiple products.<br />Products sent in a request can only be updated for the fields listed in object 'PropertiesToUpdate'. <br />In other words, you specify which products you want to update and which fields should be updated for all products.<br /><br />Sample request:<br /><br /> PATCH /v2/products<br /> {<br /> \"PropertiesToUpdate\": [<br /> \"name\",<br /> \"description\"<br /> ],<br /> \"MerchantProductRequestModels\": [<br /> {<br /> \"MerchantProductNo\": \"testMerchantProductNo\",<br /> \"Name\": \"testName\",<br /> \"Description\": \"testDescription\",<br /> },<br /> {<br /> \"MerchantProductNo\": \"testMerchantProductNo2\",<br /> \"Name\": \"testName3\",<br /> \"Description\": \"testDescription1\",<br /> }<br /> ]<br /> }",
        "operationId": "ProductBulkPatch",
        "requestBody": {
          "description": "1) PropertiesToUpdate: Fields to update<br />2) MerchantProductRequestModels: Products to be updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchMerchantProductDto"
                  }
                ],
                "description": "1) PropertiesToUpdate: Fields to update\r\n2) MerchantProductRequestModels: Products to be updated",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchMerchantProductDto"
                  }
                ],
                "description": "1) PropertiesToUpdate: Fields to update\r\n2) MerchantProductRequestModels: Products to be updated",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PatchMerchantProductDto"
                  }
                ],
                "description": "1) PropertiesToUpdate: Fields to update\r\n2) MerchantProductRequestModels: Products to be updated",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/{merchantProductNo}": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete Product.",
        "description": "Delete a product based on the merchant reference.<br />Note that we do not really delete a product, as the product<br />might still be referenced by orders etc. Therefore, the references<br />used for this product cannot be reused. We do however deactivate the product<br />which means that it will not be sent to channels.",
        "operationId": "ProductDelete",
        "parameters": [
          {
            "name": "merchantProductNo",
            "in": "path",
            "description": "The MerchantProductNo of the product you wish to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The MerchantProductNo of the product you wish to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Product.",
        "description": "Retrieve a product based on the merchant reference.",
        "operationId": "ProductGetByMerchantProductNo",
        "parameters": [
          {
            "name": "merchantProductNo",
            "in": "path",
            "description": "The unique product reference used by the Merchant (sku).",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique product reference used by the Merchant (sku).",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfMerchantProductResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfMerchantProductResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "summary": "Patch product",
        "description": "Patch products. This endpoint allows you to update single fields on a product using patch operations,<br />without having to supply the other product information.<br /><br />The format of this endpoint is a JsonPatchDocument. Examples of how this format works can be found here:<br />http://jsonpatch.com/<br /> <br />It's not possible to nest parent and children more than one level (A parent can have many children,<br />but any child cannot itself also have children).<br /> <br />The supplied MerchantProductNo needs to be unique.<br /><br /><br />Sample request:<br /> <br /> PATCH /v2/products/{merchantProductNo}<br /> {<br /> \"value\": \"Value\",<br /> \"path\": \"Name\",<br /> \"op\": \"replace\"<br /> }",
        "operationId": "ProductPatch",
        "parameters": [
          {
            "name": "merchantProductNo",
            "in": "path",
            "description": "The MerchantProductNo of the product you wish to patch",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The MerchantProductNo of the product you wish to patch",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The JsonPatchDocument providing the operations you wish to perform on the product. <br /> Value contains the value you wish to set on the property you're updating (used with operations \"add\" and \"replace\").<br /> Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.<br /> Op contains the operation you wish to perform (\"add\",\"replace\",\"remove\").<br /> From is only used when using the \"move\" operation. It refers to the source path of the value to be moved.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "The JsonPatchDocument providing the operations you wish to perform on the product. \r\n             Value contains the value you wish to set on the property you're updating (used with operations \"add\" and \"replace\").\r\n             Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.\r\n             Op contains the operation you wish to perform (\"add\",\"replace\",\"remove\").\r\n             From is only used when using the \"move\" operation. It refers to the source path of the value to be moved.",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "The JsonPatchDocument providing the operations you wish to perform on the product. \r\n             Value contains the value you wish to set on the property you're updating (used with operations \"add\" and \"replace\").\r\n             Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.\r\n             Op contains the operation you wish to perform (\"add\",\"replace\",\"remove\").\r\n             From is only used when using the \"move\" operation. It refers to the source path of the value to be moved.",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "The JsonPatchDocument providing the operations you wish to perform on the product. \r\n             Value contains the value you wish to set on the property you're updating (used with operations \"add\" and \"replace\").\r\n             Path contains the path to the property you're updating (e.g. Description). Every property in the model used for creation an updating can be used.\r\n             Op contains the operation you wish to perform (\"add\",\"replace\",\"remove\").\r\n             From is only used when using the \"move\" operation. It refers to the source path of the value to be moved.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfProductCreationResult"
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/bulkdelete": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Delete multiple Products.",
        "description": "Delete the products based on the merchant references.<br />Note that we do not really delete products, as the products<br />might still be referenced by orders. Therefore, the references<br />used for these products cannot be reused. We do however deactivate the products<br />which means that they will not be sent to channels.",
        "operationId": "ProductBulkDelete",
        "requestBody": {
          "description": "The list of MerchantProductNo of the products you wish to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of MerchantProductNo of the products you wish to delete."
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of MerchantProductNo of the products you wish to delete."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The list of MerchantProductNo of the products you wish to delete."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/productbundles": {
      "get": {
        "tags": [
          "ProductBundle"
        ],
        "summary": "Get product bundles.",
        "description": "You can get the full product information on bundles from the regular /products endpoint.",
        "operationId": "ProductBundleGetByFilter",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search product(s) by Name, MerchantProductNo, Ean or Brand<br />This search is applied to the result after applying the other filters.",
            "schema": {
              "type": "string",
              "description": "Search product(s) by Name, MerchantProductNo, Ean or Brand\r\nThis search is applied to the result after applying the other filters.",
              "nullable": true
            }
          },
          {
            "name": "eanList",
            "in": "query",
            "description": "Search products by submitting a list of EAN's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Search products by submitting a list of EAN's.",
              "nullable": true
            }
          },
          {
            "name": "merchantProductNoList",
            "in": "query",
            "description": "Search products by submitting a list of MerchantProductNo's.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Search products by submitting a list of MerchantProductNo's.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantProductBundleResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Returns.",
        "description": "Get all returns created by the channel. This call is supposed<br />to be used by merchants. Channels should use the 'GET /v2/returns/channel'<br />call.",
        "operationId": "ReturnGetDeclaredByChannel",
        "parameters": [
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on Channel IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filter on Channel IDs",
              "nullable": true
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the channel.",
              "nullable": true
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter on the fulfillment type of the order.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FulfillmentType"
                }
              ],
              "description": "Filter on the fulfillment type of the order."
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Return status(es) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnStatus"
              },
              "description": "Return status(es) to filter on.",
              "nullable": true
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "description": "Return reason(s) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnReason"
              },
              "description": "Return reason(s) to filter on.",
              "nullable": true
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the creation date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "description": "Filter on the creation date, starting from this date. This date is inclusive.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the creation date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "description": "Filter on the creation date, until this date. This date is exclusive.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantReturnResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Return.",
        "description": "Mark (part of) an order as returned by the customer.",
        "operationId": "ReturnDeclareForMerchant",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantReturnRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantReturnRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantReturnRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Returns.",
        "description": "Get all returns created by the merchant. This call is supposed<br />to be used by merchants. To get returns created by channels, the 'GET /v2/returns/merchant' endpoint should be used.<br />Channels should use the 'GET /v2/returns/channel' call.",
        "operationId": "ReturnGetReturns",
        "parameters": [
          {
            "name": "creatorType",
            "in": "query",
            "description": "Filter on the return's creator. Default is MIXED.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreatorFilter"
                }
              ],
              "description": "Filter on the return's creator. Default is MIXED.",
              "nullable": true
            }
          },
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on Channel IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filter on Channel IDs",
              "nullable": true
            }
          },
          {
            "name": "merchantOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the merchant.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the merchant.",
              "nullable": true
            }
          },
          {
            "name": "channelOrderNos",
            "in": "query",
            "description": "Filter on unique order reference used by the channel.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter on unique order reference used by the channel.",
              "nullable": true
            }
          },
          {
            "name": "fulfillmentType",
            "in": "query",
            "description": "Filter on the fulfillment type of the order.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FulfillmentType"
                }
              ],
              "description": "Filter on the fulfillment type of the order."
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Return status(es) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnStatus"
              },
              "description": "Return status(es) to filter on.",
              "nullable": true
            }
          },
          {
            "name": "reasons",
            "in": "query",
            "description": "Return reason(s) to filter on.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReturnReason"
              },
              "description": "Return reason(s) to filter on.",
              "nullable": true
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter on the creation date, starting from this date. This date is inclusive.",
            "schema": {
              "type": "string",
              "description": "Filter on the creation date, starting from this date. This date is inclusive.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter on the creation date, until this date. This date is exclusive.",
            "schema": {
              "type": "string",
              "description": "Filter on the creation date, until this date. This date is exclusive.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantReturnResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Return"
        ],
        "summary": "Mark a return as received.",
        "description": "Mark a return as received.",
        "operationId": "ReturnUpdateForMerchant",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantReturnUpdateRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantReturnUpdateRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantReturnUpdateRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant/new": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Unhandled Returns.",
        "description": "Get all new / unhandled returns created by channels. This call is supposed<br />to be used by merchants. Channels should use the 'GET /v2/returns/channel'<br />call.",
        "operationId": "ReturnGetUnhandled",
        "parameters": [
          {
            "name": "channelIds",
            "in": "query",
            "description": "Filter on Channel IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filter on Channel IDs",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to filter on. Starts at 1.",
            "schema": {
              "type": "integer",
              "description": "The page to filter on. Starts at 1.",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantReturnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/returns/merchant/{merchantOrderNo}": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return.",
        "description": "Retrieve returns based on the supplied merchant order number. May return more than 1 result.<br />This call is supposed to be used by merchants. Channels should use the 'GET /v2/returns/channel'<br />call.",
        "operationId": "ReturnGetByMerchantOrderNo",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantSingleOrderReturnResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get settings.",
        "description": "Get merchant base info, settings and vat number.",
        "operationId": "SettingsGet",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleOfMerchantSettingsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Create Shipment.",
        "description": "Mark (part of) an order as shipped.",
        "operationId": "ShipmentCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments/{merchantShipmentNo}": {
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Update Shipment.",
        "description": "Update an existing shipment with tracking information.",
        "operationId": "ShipmentUpdate",
        "parameters": [
          {
            "name": "merchantShipmentNo",
            "in": "path",
            "description": "The merchant's shipment reference.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The merchant's shipment reference.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated tracking information.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentTrackingRequest"
                  }
                ],
                "description": "The updated tracking information.",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentTrackingRequest"
                  }
                ],
                "description": "The updated tracking information.",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentTrackingRequest"
                  }
                ],
                "description": "The updated tracking information.",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/carriers/{merchantOrderNo}": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Get carriers for channel provided shipping labels",
        "description": "Get the carriers for buying a shipping label from the channel",
        "operationId": "ShipmentGetShipmentLabelCarriers",
        "parameters": [
          {
            "name": "merchantOrderNo",
            "in": "path",
            "description": "The merchant's order reference.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The merchant's order reference.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The parcel information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentLabelCarrierRequest"
                  }
                ],
                "description": "The parcel information",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentLabelCarrierRequest"
                  }
                ],
                "description": "The parcel information",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantShipmentLabelCarrierRequest"
                  }
                ],
                "description": "The parcel information",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantShipmentLabelCarrierResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/shipments/channelmethod": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Create shipment for channel provided shipping labels",
        "description": "Create a shipment, which will request a shipping label from the channel",
        "operationId": "ShipmentCreateForChannelMethod",
        "requestBody": {
          "description": "The shipment to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantChannelLabelShipmentRequest"
                  }
                ],
                "description": "The shipment to create",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantChannelLabelShipmentRequest"
                  }
                ],
                "description": "The shipment to create",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantChannelLabelShipmentRequest"
                  }
                ],
                "description": "The shipment to create",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders/{merchantShipmentNo}/shippinglabel": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Download shipping label.",
        "description": "Downloads the shipping label for the shipment. There may pass some time between creating the shipment<br />and the availability of the label. So '404 Not Found' might incidate it is not available yet.",
        "operationId": "ShipmentShippingLabel",
        "parameters": [
          {
            "name": "merchantShipmentNo",
            "in": "path",
            "description": "The unique shipment reference as used by the merchant.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique shipment reference as used by the merchant.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "shippingLabel",
            "content": {
              "application/vnd.shippingLabel": {
                "schema": {
                  "type": "file",
                  "format": "byte"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/stocklocations": {
      "get": {
        "tags": [
          "StockLocation"
        ],
        "summary": "Get the stock locations (or virtual warehouses).",
        "description": "Get the different stock locations (or virtual warehouses) that are in use.<br />This may include stock locations for 'fulfillment by ... (Amazon/bol/CDiscount)' (FBA/LVB/FBC) solutions.<br />You can use the id's to get to stock of products in specific stock location, e.g. the FBA stock for the products.",
        "operationId": "StockLocationIndex",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantStockLocationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/webhooks": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get Webhooks.",
        "description": "Get all webhooks created in the ChannelEngine.",
        "operationId": "WebhooksGetAll",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionOfMerchantWebhookResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create Webhook.",
        "description": "Create a new webhook in the ChannelEngine.",
        "operationId": "WebhooksCreate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantWebhookRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantWebhookRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantWebhookRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhook"
        ],
        "summary": "Update Webhook.",
        "description": "Update a webhook in the ChannelEngine.",
        "operationId": "WebhooksUpdate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantWebhookRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantWebhookRequest"
                  }
                ],
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MerchantWebhookRequest"
                  }
                ],
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/webhooks/{webhookName}": {
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete Webhook.",
        "description": "Delete a webhook based on the webhook name.",
        "operationId": "WebhooksDelete",
        "parameters": [
          {
            "name": "webhookName",
            "in": "path",
            "description": "The unique name of a webhook you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique name of a webhook you want to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MerchantCancellationLineRequest": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Quantity of the product to cancel.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MancoReason": {
        "enum": [
          "NOT_IN_STOCK",
          "DAMAGED",
          "INCOMPLETE",
          "CLIENT_CANCELLED",
          "INVALID_ADDRESS",
          "OTHER"
        ],
        "type": "string"
      },
      "MerchantCancellationRequest": {
        "required": [
          "Lines",
          "MerchantCancellationNo",
          "MerchantOrderNo"
        ],
        "type": "object",
        "properties": {
          "MerchantCancellationNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique cancellation reference used by the Merchant (sku)."
          },
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant (sku)."
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantCancellationLineRequest"
            }
          },
          "Reason": {
            "type": "string",
            "description": "Reason for cancellation (text).",
            "nullable": true
          },
          "ReasonCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MancoReason"
              }
            ],
            "description": "Reason code for cancellation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelChannelResponse": {
        "type": "object",
        "properties": {
          "ChannelId": {
            "type": "integer",
            "description": "The ID of the Channel.",
            "format": "int32",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "A boolean value indicating whether the Channel is enabled."
          },
          "ChannelName": {
            "type": "string",
            "description": "The name of the Channel.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelGlobalChannelResponse": {
        "type": "object",
        "properties": {
          "CountryCode": {
            "type": "string",
            "description": "The country code of the Global Channel.",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The ID of the Global Channel.",
            "format": "int32",
            "nullable": true
          },
          "Channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelChannelResponse"
            },
            "description": "The status of the instances.",
            "nullable": true
          },
          "LanguageCode": {
            "type": "string",
            "description": "The language code of the Global Channel.",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the Global Channel.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfChannelGlobalChannelResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelGlobalChannelResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductWithBuyBoxPrice": {
        "type": "object",
        "properties": {
          "Sku": {
            "type": "string",
            "description": "Product SKU number",
            "nullable": true
          },
          "Gtin": {
            "type": "string",
            "description": "Product GTIN",
            "nullable": true
          },
          "BuyBoxPrice": {
            "type": "number",
            "description": "Price of Buy box winner (excl. shipping cost)\r\nNote: not all channels have a separate shipping cost field (e.g. bol.com), so can be the same as BuyBoxPriceInclShipping",
            "format": "decimal",
            "nullable": true
          },
          "BuyBoxPriceInclShipping": {
            "type": "number",
            "description": "Price of Buy box winner (incl. shipping cost).\r\nIf null, then there is no data or no Buy box winner",
            "format": "decimal",
            "nullable": true
          },
          "IsMerchantBuyBoxWinner": {
            "type": "boolean",
            "description": "Are you the Buy box winner or not?"
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductWithBuyBoxPrice": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductWithBuyBoxPrice"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListedProductChannelStatus": {
        "enum": [
          "NONE",
          "PUBLISHED",
          "NOT_PUBLISHED",
          "UNKNOWN",
          "UNDER_REVIEW",
          "INVALID_ON_CREATE"
        ],
        "type": "string"
      },
      "ListedProductExportStatus": {
        "enum": [
          "CREATED",
          "UPDATED",
          "DELETED",
          "CREATE_FAILED"
        ],
        "type": "string"
      },
      "ChannelListedProductResponse": {
        "type": "object",
        "properties": {
          "ChannelStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListedProductChannelStatus"
              }
            ],
            "description": "The status of the channel.",
            "readOnly": true
          },
          "Ean": {
            "type": "string",
            "description": "EAN",
            "nullable": true,
            "readOnly": true
          },
          "ExportStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListedProductExportStatus"
              }
            ],
            "description": "Export status in ChannelEngine",
            "nullable": true,
            "readOnly": true
          },
          "MerchantProductNo": {
            "type": "string",
            "description": "Your product number (SKU)",
            "nullable": true,
            "readOnly": true
          },
          "LastExportedPrice": {
            "type": "number",
            "description": "Your product last exported price",
            "format": "decimal",
            "nullable": true
          },
          "LastExportedStock": {
            "type": "integer",
            "description": "Your product last exported stock",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfChannelListedProductResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelListedProductResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationType": {
        "enum": [
          "CHANNEL_ORDER_ANONYMIZED_BY_REQUEST",
          "CHANNEL_ORDER_ANONYMIZED_AUTOMATICALLY",
          "CHANNEL_ORDER_CANCELLATION_REQUEST_NEW",
          "CHANNEL_ORDER_CORRECTION_NEEDED",
          "CHANNEL_ORDER_DUPLICATE_LINE",
          "CHANNEL_ORDER_INVOICE_SEND_FAILED",
          "CHANNEL_ORDER_IMPORT_FAILED",
          "CHANNEL_ORDER_NEW",
          "CHANNEL_ORDER_OVERDUE",
          "CHANNEL_PRODUCT_DATA_EXPORT_FAILED",
          "CHANNEL_PRODUCT_DATA_IMPORT_FAILED",
          "CHANNEL_RETURN_EXPORT_FAILED",
          "CHANNEL_RETURN_IMPORT_FAILED",
          "CHANNEL_RETURN_NEW",
          "CHANNEL_RETURN_OVERDUE",
          "CHANNEL_REFUND_EXPORT_FAILED",
          "CHANNEL_SHIPMENT_IMPORT_FAILED",
          "CHANNEL_SHIPMENT_IMPORT_STATUS_FAILED",
          "CHANNEL_SHIPMENT_EXPORT_FAILED",
          "CHANNEL_SHIPMENT_IMPORT_MISSING_LINE_FAILED",
          "CHANNEL_FULFILLMENT_SHIPMENT_IMPORT_STATUS_FAILED",
          "CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_FAILED",
          "CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_SUCCEEDED",
          "CHANNEL_FULFILLMENT_SHIPMENT_LINE_FOR_CLOSED_ORDER",
          "CHANNELENGINE_SUPPORT_NOTIFICATION",
          "CHANNELENGINE_WEBHOOK_RQUEST_FAILED",
          "FEED_NO_PRODUCTS_FAILED",
          "FEED_IMPORT_FAILED",
          "GLOBAL_MESSAGE",
          "MERCHANT_ORDER_EXPORT_FAILED",
          "PLUGIN_INVALID_SETTING",
          "PLUGIN_DEACTIVATED",
          "PRODUCT_BUNDLE_IMPORT_FAILED",
          "CHANNEL_REFUND_LINE_ITEMS_ERROR",
          "CHANNEL_CANCELLATION_EXPORT_FAILED",
          "MERCHANT_ORDER_EXPORT_LINES_CANCELLED",
          "OAUTH_REFRESH_TOKEN_EXPIRATION",
          "MERCHANT_CANCELLATION_IMPORT_FAILED",
          "CHANNEL_ORDER_TOO_LONG_ON_NEW",
          "MERCHANT_STOCK_UPDATE_FAILED",
          "FEED_INVALID_PRODUCTS_OCCURED",
          "CHANNEL_SHIPMENT_EXPORT_INVALID_MERCHANTSHIPMENTNO",
          "CHANNEL_PRODUCT_OFFER_EXPORT_FAILED",
          "TRANLATIONS_IMAGE_TAGS_BROKEN",
          "CHANNEL_RETURN_DELETED",
          "TAX_PROVIDER_NOT_ACTIVATED",
          "STOCK_LOCATION_NOT_FOUND"
        ],
        "type": "string"
      },
      "MerchantNotificationResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier used by ChannelEngine.",
            "format": "int32"
          },
          "Read": {
            "type": "boolean",
            "description": "Indicating whether the notification is already read using the backoffice."
          },
          "CreatedAt": {
            "type": "string",
            "description": "Get the created date time.",
            "format": "date-time"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantNotificationResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantNotificationResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockPriceUpdateRequest": {
        "required": [
          "MerchantProductNo"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The stock of the product. Should not be negative.",
            "format": "int32",
            "nullable": true
          },
          "Price": {
            "minimum": 0,
            "type": "number",
            "description": "The price of the product. Should not be negative.",
            "format": "decimal",
            "nullable": true
          },
          "StockLocationId": {
            "type": "integer",
            "description": "The stock location id of updated stok.\r\nIf not provided stock from default stock location will be updated.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfDictionaryOfStringAndListOfString": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantOfferGetStockResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The product SKU.",
            "nullable": true
          },
          "StockLocationId": {
            "type": "integer",
            "description": "The ChannelEngine id of the stock location.",
            "format": "int32"
          },
          "Stock": {
            "type": "integer",
            "description": "The quantity of products in stock at the stock location.",
            "format": "int32"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The timestamp of the last stock update for the stock location.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantOfferGetStockResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOfferGetStockResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderStatusView": {
        "enum": [
          "IN_PROGRESS",
          "SHIPPED",
          "IN_BACKORDER",
          "MANCO",
          "CANCELED",
          "IN_COMBI",
          "CLOSED",
          "NEW",
          "RETURNED",
          "REQUIRES_CORRECTION",
          "AWAITING_PAYMENT"
        ],
        "type": "string"
      },
      "FulfillmentType": {
        "enum": [
          "ALL",
          "ONLY_MERCHANT",
          "ONLY_CHANNEL",
          "MIXED",
          "INCLUDES_MERCHANT"
        ],
        "type": "string"
      },
      "OrderSupport": {
        "enum": [
          "NONE",
          "ORDERS",
          "SPLIT_ORDERS",
          "SPLIT_ORDER_LINES"
        ],
        "type": "string"
      },
      "Gender": {
        "enum": [
          "MALE",
          "FEMALE",
          "NOT_APPLICABLE"
        ],
        "type": "string"
      },
      "MerchantAddressResponse": {
        "type": "object",
        "properties": {
          "Line1": {
            "type": "string",
            "description": "The first address line, use this field if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "Line2": {
            "type": "string",
            "description": "The second address line, use this field if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "Line3": {
            "type": "string",
            "description": "The third address line, use this field if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "Gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Gender"
              }
            ],
            "description": "Optional. The customer's gender.",
            "nullable": true
          },
          "CompanyName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Company addressed too.",
            "nullable": true
          },
          "FirstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the customer.",
            "nullable": true
          },
          "LastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the customer (includes the surname prefix [tussenvoegsel] like 'de', 'van', 'du').",
            "nullable": true
          },
          "StreetName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the street (without house number information)\r\nThis field might be empty if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "HouseNr": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The house number\r\nThis field might be empty if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "HouseNrAddition": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Addition to the house number\r\nIf the address is: Groenhazengracht 2c, the address will be:\r\nStreetName: Groenhazengracht\r\nHouseNo: 2\r\nHouseNrAddition: c\r\nThis field might be empty if address validation is disabled in ChannelEngine.",
            "nullable": true
          },
          "ZipCode": {
            "type": "string",
            "description": "The zip or postal code.",
            "nullable": true
          },
          "City": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the city.",
            "nullable": true
          },
          "Region": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. State/province/region.",
            "nullable": true
          },
          "CountryIso": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "For example: NL, BE, FR.",
            "nullable": true
          },
          "Original": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The address as a single string: use in case the address lines are entered\r\nas single lines and later parsed into street, house number and house number addition.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantStockLocationResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The ChannelEngine id of the stock location.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The ChannelEngine name of the stock location.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderLineExtraDataResponse": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Condition": {
        "enum": [
          "NEW",
          "NEW_REFURBISHED",
          "USED_AS_NEW",
          "USED_GOOD",
          "USED_REASONABLE",
          "USED_MEDIOCRE",
          "UNKNOWN",
          "USED_VERY_GOOD"
        ],
        "type": "string"
      },
      "MerchantOrderLineResponse": {
        "required": [
          "ChannelProductNo",
          "Quantity",
          "UnitPriceInclVat"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusView"
              }
            ],
            "description": "The status of the order."
          },
          "IsFulfillmentByMarketplace": {
            "type": "boolean",
            "description": "Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?."
          },
          "Gtin": {
            "type": "string",
            "description": "Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The product description (or title) provided by the channel.",
            "nullable": true
          },
          "StockLocation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantStockLocationResponse"
              }
            ],
            "description": "Stock location(s) of the order line.",
            "nullable": true
          },
          "UnitVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the value of a single unit of the ordered product\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "LineTotalInclVat": {
            "type": "number",
            "description": "The total value of the order line (quantity * unit price) including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "LineVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of the order line (quantity * unit price)\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalUnitPriceInclVat": {
            "type": "number",
            "description": "The value of a single unit of the ordered product including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalUnitVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the value of a single unit of the ordered product\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalLineTotalInclVat": {
            "type": "number",
            "description": "The total value of the order line (quantity * unit price) including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalLineVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of the order line (quantity * unit price)\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalFeeFixed": {
            "type": "number",
            "description": "A percentage fee that is charged by the Channel for this orderline.\r\nThis fee rate is based on the currency of client\r\nThis field is optional, send 0 if not applicable.",
            "format": "decimal"
          },
          "BundleProductMerchantProductNo": {
            "type": "string",
            "description": "If the product is ordered part of a bundle, this field contains the MerchantProductNo of\r\nthe product bundle.",
            "nullable": true
          },
          "JurisCode": {
            "type": "string",
            "description": "State assigned code identifying the jurisdiction.",
            "nullable": true
          },
          "JurisName": {
            "type": "string",
            "description": "Name of a tax jurisdiction.",
            "nullable": true
          },
          "VatRate": {
            "type": "number",
            "description": "VAT rate of the orderline.",
            "format": "decimal"
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOrderLineExtraDataResponse"
            },
            "nullable": true
          },
          "ChannelProductNo": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the channel."
          },
          "MerchantProductNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the merchant.",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items of the product.",
            "format": "int32"
          },
          "CancellationRequestedQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items for which cancellation was requested by the customer.\r\nSome channels allow a customer to cancel an order until it has been shipped.\r\nWhen an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.\r\nUse this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.",
            "format": "int32"
          },
          "UnitPriceInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "The value of a single unit of the ordered product including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "FeeFixed": {
            "minimum": 0,
            "type": "number",
            "description": "A fixed fee that is charged by the Channel for this orderline.\r\nThis fee rate is based on the currency of the Channel\r\nThis field is optional, send 0 if not applicable.",
            "format": "decimal"
          },
          "FeeRate": {
            "minimum": 0,
            "type": "number",
            "description": "A percentage fee that is charged by the Channel for this orderline.\r\nThis field is optional, send 0 if not applicable.",
            "format": "decimal"
          },
          "Condition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Condition"
              }
            ],
            "description": "The condition of the product, this can be used to indicate that a product is a second-hand product."
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "Expected delivery date from channels, empty if channels not support this value",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderResponse": {
        "required": [
          "CurrencyCode",
          "Email",
          "OrderDate",
          "ShippingCostsInclVat"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier used by ChannelEngine. This identifier does\r\nnot have to be saved. It should only be used in a call to acknowledge the order.",
            "format": "int32"
          },
          "ChannelName": {
            "type": "string",
            "description": "The name of the channel for this specific environment/account.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The unique ID of the channel for this specific environment/account.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the channel across all of ChannelEngine.",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The unique ID of the channel across all of ChannelEngine.",
            "format": "int32",
            "nullable": true
          },
          "ChannelOrderSupport": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderSupport"
              }
            ],
            "description": "The type of orders the channel support.",
            "deprecated": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The order reference used by the channel.\r\nThis number is not guaranteed to be unique accross all orders,\r\nbecause different channels can use the same order number format.",
            "nullable": true
          },
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant",
            "nullable": true
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderStatusView"
              }
            ],
            "description": "The status of the order."
          },
          "IsBusinessOrder": {
            "type": "boolean",
            "description": "Indicating whether the order is a business order."
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date the order was created in ChannelEngine.",
            "format": "date-time",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date the order was last updated in ChannelEngine.",
            "format": "date-time",
            "nullable": true
          },
          "MerchantComment": {
            "type": "string",
            "description": "The optional comment a merchant can add to an order.",
            "nullable": true
          },
          "BillingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantAddressResponse"
              }
            ],
            "description": "The billing or invoice address.",
            "nullable": true
          },
          "ShippingAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantAddressResponse"
              }
            ],
            "description": "The shipping address.",
            "nullable": true
          },
          "SubTotalInclVat": {
            "type": "number",
            "description": "The total value of the order lines including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "SubTotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the order lines\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "ShippingCostsVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the shipping fee\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "TotalInclVat": {
            "type": "number",
            "description": "The total value of the order including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "TotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of te order\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalSubTotalInclVat": {
            "type": "number",
            "description": "The total value of the order lines including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalSubTotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the order lines\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalShippingCostsInclVat": {
            "type": "number",
            "description": "The shipping fee including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalShippingCostsVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the shipping fee\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalTotalInclVat": {
            "type": "number",
            "description": "The total value of the order including VAT\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "OriginalTotalVat": {
            "type": "number",
            "description": "The total amount of VAT charged over the total value of te order\r\n(in the currency in which the order was paid for, see CurrencyCode).",
            "format": "decimal",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOrderLineResponse"
            },
            "nullable": true
          },
          "Phone": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The customer's telephone number.",
            "nullable": true
          },
          "Email": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The customer's email."
          },
          "CompanyRegistrationNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. A company's chamber of commerce number.",
            "nullable": true
          },
          "VatNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional. A company's VAT number.",
            "nullable": true
          },
          "PaymentMethod": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The payment method used on the order.",
            "nullable": true
          },
          "PaymentReferenceNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "Reference or transaction id for the payment",
            "nullable": true
          },
          "ShippingCostsInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "The shipping fee including VAT\r\n(in the shop's base currency calculated using the exchange rate at the time of ordering).",
            "format": "decimal"
          },
          "CurrencyCode": {
            "maxLength": 3,
            "type": "string",
            "description": "The currency code for the amounts of the order."
          },
          "OrderDate": {
            "type": "string",
            "description": "The date the order was created at the channel.",
            "format": "date-time"
          },
          "ChannelCustomerNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique customer reference used by the channel.",
            "nullable": true
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Extra data on the order.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantOrderResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantOrderResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderAcknowledgementRequest": {
        "required": [
          "MerchantOrderNo",
          "OrderId"
        ],
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Your own order reference, this will be used in consecutive order processing API calls."
          },
          "OrderId": {
            "type": "integer",
            "description": "The ChannelEngine order ID of the order you would like to acknowledge.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantOrderCommentUpdateRequest": {
        "required": [
          "MerchantComment"
        ],
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Your own order reference for the order you would like to update the comment for.\r\nEither this field or OrderId is required",
            "nullable": true
          },
          "OrderId": {
            "type": "integer",
            "description": "The ChannelEngine order ID of the order you would like to update the comment for.\r\nEither this field or MerchantOrderNo is required",
            "format": "int32",
            "nullable": true
          },
          "MerchantComment": {
            "type": "string",
            "description": "The merchant comment you would like add / update for the order."
          }
        },
        "additionalProperties": false
      },
      "ExtraDataType": {
        "enum": [
          "TEXT",
          "NUMBER",
          "URL",
          "IMAGEURL"
        ],
        "type": "string"
      },
      "MerchantProductExtraDataItemRequest": {
        "type": "object",
        "properties": {
          "Key": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the extra data field.",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "Value of the extra data field.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraDataType"
              }
            ],
            "description": "Type of the extra data field."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Add this field to the export of the product feed to the channel."
          }
        },
        "additionalProperties": false
      },
      "VatRateType": {
        "enum": [
          "STANDARD",
          "REDUCED",
          "SUPER_REDUCED",
          "EXEMPT"
        ],
        "type": "string"
      },
      "MerchantProductRequest": {
        "required": [
          "MerchantProductNo"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "A unique identifier of the product. (sku)."
          },
          "ParentMerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "If this product is a different version of another\r\nproduct (for example, all fields are the same except\r\nsize), then this field should contain\r\nthe 'MerchantProductNo' of the parent. The parent\r\nshould already exist (or be present between the products\r\nin the content of the API call, it does not matter whether\r\nthe parent is behind the child in the list).",
            "nullable": true
          },
          "ParentMerchantProductNo2": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "If this product is a different version of another\r\nproduct (for example, all fields are the same except\r\ncolor) and itself is a parent with child products (e.g. of sizes),\r\nthen this field should contain the 'MerchantProductNo' of the grandparent. The grandparent\r\nshould already exist (or be present between the products\r\nin the content of the API call, it does not matter whether\r\nthe grandparent is behind the child in the list).\r\nWhen you set this field, the ParentMerchantProductNo should be left empty.\r\n            \r\nUse this field in case of three level product hierarchy,\r\ne.g. model - color - size.\r\nThis is required for channels like Otto.",
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductExtraDataItemRequest"
            },
            "description": "An optional list of key-value pairs containing\r\nextra data about this product. This data can be\r\nsent to channels or used for filtering products.",
            "nullable": true
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The name of the product.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A description of the product. Can contain these HTML tags:\r\ndiv, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.",
            "nullable": true
          },
          "Brand": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The brand of the product.",
            "nullable": true
          },
          "Size": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..",
            "nullable": true
          },
          "Color": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The color of the product (variant).",
            "nullable": true
          },
          "Ean": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The EAN of GTIN of the product.",
            "nullable": true
          },
          "ManufacturerProductNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the manufacturer/vendor of the product.",
            "nullable": true
          },
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items in stock.",
            "format": "int32"
          },
          "Price": {
            "minimum": 0,
            "type": "number",
            "description": "Price, including VAT.",
            "format": "decimal"
          },
          "MSRP": {
            "type": "number",
            "description": "Manufacturer's suggested retail price.",
            "format": "decimal",
            "nullable": true
          },
          "PurchasePrice": {
            "type": "number",
            "description": "Optional. The purchase price of the product. Useful for repricing.",
            "format": "decimal",
            "nullable": true
          },
          "VatRateType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VatRateType"
              }
            ],
            "description": "The type of VAT which applies to this product.\r\nSee: http://ec.europa.eu/taxation_customs/taxation/vat/topics/rates_en.htm."
          },
          "ShippingCost": {
            "type": "number",
            "description": "Shipping cost of the product.",
            "format": "decimal",
            "nullable": true
          },
          "ShippingTime": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "A textual representation of the shippingtime.\r\nFor example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.",
            "nullable": true
          },
          "Url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL pointing to the merchant's webpage\r\nwhich displays this product.",
            "nullable": true
          },
          "ImageUrl": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL at which an image of this product\r\ncan be found.",
            "nullable": true
          },
          "ExtraImageUrl1": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (1).",
            "nullable": true
          },
          "ExtraImageUrl2": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (2).",
            "nullable": true
          },
          "ExtraImageUrl3": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (3).",
            "nullable": true
          },
          "ExtraImageUrl4": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (4).",
            "nullable": true
          },
          "ExtraImageUrl5": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (5).",
            "nullable": true
          },
          "ExtraImageUrl6": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (6).",
            "nullable": true
          },
          "ExtraImageUrl7": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (7).",
            "nullable": true
          },
          "ExtraImageUrl8": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (8).",
            "nullable": true
          },
          "ExtraImageUrl9": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (9).",
            "nullable": true
          },
          "CategoryTrail": {
            "type": "string",
            "description": "The category to which this product belongs.\r\nPlease supply this field in the following format:\r\n'maincategory > category > subcategory'\r\nFor example:\r\n'vehicles > bikes > mountainbike'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductMessage": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Reference": {
            "type": "string",
            "nullable": true
          },
          "Warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductCreationResult": {
        "type": "object",
        "properties": {
          "RejectedCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AcceptedCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ProductMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMessage"
            },
            "description": "Messages about the rejected products.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfProductCreationResult": {
        "type": "object",
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCreationResult"
              }
            ],
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductExtraDataItemResponse": {
        "type": "object",
        "properties": {
          "Key": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Name of the extra data field.",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "Value of the extra data field.",
            "nullable": true
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtraDataType"
              }
            ],
            "description": "Type of the extra data field."
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Add this field to the export of the product feed to the channel."
          }
        },
        "additionalProperties": false
      },
      "MerchantProductResponse": {
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "description": "Is the product active for the Merchant?."
          },
          "MerchantProductNo": {
            "type": "string",
            "description": "A unique identifier of the product. (sku).",
            "nullable": true
          },
          "ExtraData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductExtraDataItemResponse"
            },
            "nullable": true
          },
          "Name": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The name of the product.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A description of the product. Can contain these HTML tags:\r\ndiv, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.",
            "nullable": true
          },
          "Brand": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The brand of the product.",
            "nullable": true
          },
          "Size": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..",
            "nullable": true
          },
          "Color": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Optional. The color of the product (variant).",
            "nullable": true
          },
          "Ean": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The EAN of GTIN of the product.",
            "nullable": true
          },
          "ManufacturerProductNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the manufacturer/vendor of the product.",
            "nullable": true
          },
          "Stock": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of items in stock.",
            "format": "int32"
          },
          "Price": {
            "minimum": 0,
            "type": "number",
            "description": "Price, including VAT.",
            "format": "decimal"
          },
          "MSRP": {
            "type": "number",
            "description": "Manufacturer's suggested retail price.",
            "format": "decimal",
            "nullable": true
          },
          "PurchasePrice": {
            "type": "number",
            "description": "Optional. The purchase price of the product. Useful for repricing.",
            "format": "decimal",
            "nullable": true
          },
          "VatRateType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VatRateType"
              }
            ],
            "description": "The type of VAT which applies to this product.\r\nSee: http://ec.europa.eu/taxation_customs/taxation/vat/topics/rates_en.htm."
          },
          "ShippingCost": {
            "type": "number",
            "description": "Shipping cost of the product.",
            "format": "decimal",
            "nullable": true
          },
          "ShippingTime": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "A textual representation of the shippingtime.\r\nFor example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.",
            "nullable": true
          },
          "Url": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL pointing to the merchant's webpage\r\nwhich displays this product.",
            "nullable": true
          },
          "ImageUrl": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "A URL at which an image of this product\r\ncan be found.",
            "nullable": true
          },
          "ExtraImageUrl1": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (1).",
            "nullable": true
          },
          "ExtraImageUrl2": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (2).",
            "nullable": true
          },
          "ExtraImageUrl3": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (3).",
            "nullable": true
          },
          "ExtraImageUrl4": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (4).",
            "nullable": true
          },
          "ExtraImageUrl5": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (5).",
            "nullable": true
          },
          "ExtraImageUrl6": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (6).",
            "nullable": true
          },
          "ExtraImageUrl7": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (7).",
            "nullable": true
          },
          "ExtraImageUrl8": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (8).",
            "nullable": true
          },
          "ExtraImageUrl9": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "Url to an additional image of product (9).",
            "nullable": true
          },
          "CategoryTrail": {
            "type": "string",
            "description": "The category to which this product belongs.\r\nPlease supply this field in the following format:\r\n'maincategory > category > subcategory'\r\nFor example:\r\n'vehicles > bikes > mountainbike'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchMerchantProductDto": {
        "type": "object",
        "properties": {
          "PropertiesToUpdate": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "MerchantProductRequestModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfMerchantProductResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantProductResponse"
              }
            ],
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantProductBundlePartResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "Ean": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "MerchantProductBundleResponse": {
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "nullable": true
          },
          "Ean": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "format": "decimal"
          },
          "Parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductBundlePartResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantProductBundleResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantProductBundleResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReturnStatus": {
        "enum": [
          "IN_PROGRESS",
          "RECEIVED",
          "CANCELLED"
        ],
        "type": "string"
      },
      "ReturnReason": {
        "enum": [
          "PRODUCT_DEFECT",
          "PRODUCT_UNSATISFACTORY",
          "WRONG_PRODUCT",
          "TOO_MANY_PRODUCTS",
          "REFUSED",
          "REFUSED_DAMAGED",
          "WRONG_ADDRESS",
          "NOT_COLLECTED",
          "WRONG_SIZE",
          "OTHER"
        ],
        "type": "string"
      },
      "ShipmentLineStatus": {
        "enum": [
          "SHIPPED",
          "IN_BACKORDER",
          "MANCO"
        ],
        "type": "string"
      },
      "MerchantReturnLineResponse": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku).",
            "nullable": true
          },
          "OrderLine": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantOrderLineResponse"
              }
            ],
            "description": "The order line of the product for the return line.",
            "nullable": true
          },
          "ShipmentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShipmentLineStatus"
              }
            ],
            "description": "The status of the product in relation to the shipment.",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in this return.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnResponse": {
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant.",
            "nullable": true
          },
          "ChannelOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Channel.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The id of the channel.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The id of the Global Channel.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the Global Channel.",
            "nullable": true,
            "readOnly": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnLineResponse"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date at which the return was created in ChannelEngine.",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date at which the return was last modified in ChannelEngine.",
            "format": "date-time"
          },
          "MerchantReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.",
            "nullable": true
          },
          "ChannelReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Channel, will be empty in case of a merchant return.",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "The unique return reference used by ChannelEngine.",
            "format": "int32"
          },
          "Reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReason"
              }
            ],
            "description": "The reason code of the return."
          },
          "CustomerComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of customer on the (reason of) the return.",
            "nullable": true
          },
          "MerchantComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of merchant on the return.",
            "nullable": true
          },
          "RefundInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount incl. VAT.",
            "format": "decimal"
          },
          "RefundExclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount excl. VAT.",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantReturnResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnLineRequest": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in this return.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnRequest": {
        "required": [
          "Lines",
          "MerchantOrderNo",
          "MerchantReturnNo"
        ],
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant (sku)."
          },
          "MerchantReturnNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return reference used by the Merchant (sku)."
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnLineRequest"
            }
          },
          "Id": {
            "type": "integer",
            "description": "The unique return reference used by ChannelEngine.",
            "format": "int32"
          },
          "Reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReason"
              }
            ],
            "description": "The reason code of the return."
          },
          "CustomerComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of customer on the (reason of) the return.",
            "nullable": true
          },
          "MerchantComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of merchant on the return.",
            "nullable": true
          },
          "RefundInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount incl. VAT.",
            "format": "decimal"
          },
          "RefundExclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount excl. VAT.",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "CreatorFilter": {
        "enum": [
          "ONLY_FROM_MERCHANT",
          "ONLY_FROM_CHANNEL",
          "MIXED"
        ],
        "type": "string"
      },
      "MerchantReturnLineUpdateRequest": {
        "required": [
          "AcceptedQuantity",
          "MerchantProductNo",
          "RejectedQuantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "AcceptedQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of items that have been accepted.",
            "format": "int32"
          },
          "RejectedQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount of items that have been rejected.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantReturnUpdateRequest": {
        "required": [
          "Lines",
          "ReturnId"
        ],
        "type": "object",
        "properties": {
          "ReturnId": {
            "type": "integer",
            "description": "The ChannelEngine return ID of the return you would like to update.",
            "format": "int32"
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantReturnLineUpdateRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "MerchantSingleOrderReturnLineResponse": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku).",
            "nullable": true
          },
          "AcceptedQuantity": {
            "type": "integer",
            "description": "The accepted quantity of returned products in this orderline.",
            "format": "int32",
            "nullable": true
          },
          "RejectedQuantity": {
            "type": "integer",
            "description": "The rejected quantity of returned products in this orderline.",
            "format": "int32",
            "nullable": true
          },
          "OrderLine": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantOrderLineResponse"
              }
            ],
            "description": "The order line of the product for the return line.",
            "nullable": true
          },
          "ShipmentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShipmentLineStatus"
              }
            ],
            "description": "The status of the product in relation to the shipment.",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in this return.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantSingleOrderReturnResponse": {
        "type": "object",
        "properties": {
          "MerchantOrderNo": {
            "type": "string",
            "description": "The unique order reference used by the Merchant.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantSingleOrderReturnLineResponse"
            },
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "The date at which the return was created in ChannelEngine.",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "description": "The date at which the return was last modified in ChannelEngine.",
            "format": "date-time"
          },
          "MerchantReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.",
            "nullable": true
          },
          "ChannelReturnNo": {
            "type": "string",
            "description": "The unique return reference used by the Channel, will be empty in case of a merchant return.",
            "nullable": true
          },
          "ChannelId": {
            "type": "integer",
            "description": "The id of the channel.",
            "format": "int32",
            "nullable": true
          },
          "GlobalChannelId": {
            "type": "integer",
            "description": "The id of the Global Channel.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "GlobalChannelName": {
            "type": "string",
            "description": "The name of the Global Channel.",
            "nullable": true,
            "readOnly": true
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnStatus"
              }
            ],
            "description": "The current status of the return."
          },
          "Id": {
            "type": "integer",
            "description": "The unique return reference used by ChannelEngine.",
            "format": "int32"
          },
          "Reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReturnReason"
              }
            ],
            "description": "The reason code of the return."
          },
          "CustomerComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of customer on the (reason of) the return.",
            "nullable": true
          },
          "MerchantComment": {
            "maxLength": 4001,
            "minLength": 0,
            "type": "string",
            "description": "Optional. Comment of merchant on the return.",
            "nullable": true
          },
          "RefundInclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount incl. VAT.",
            "format": "decimal"
          },
          "RefundExclVat": {
            "minimum": 0,
            "type": "number",
            "description": "Refund amount excl. VAT.",
            "format": "decimal"
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantSingleOrderReturnResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantSingleOrderReturnResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipmentSettingsResponse": {
        "type": "object",
        "properties": {
          "DefaultTrackedShipmentMethod": {
            "type": "string",
            "nullable": true
          },
          "DefaultUntrackedShipmentMethod": {
            "type": "string",
            "nullable": true
          },
          "AutomaticallySetShipmentMethodAfterMinutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceSettingsResponse": {
        "type": "object",
        "properties": {
          "ManageStock": {
            "type": "boolean"
          },
          "DisableAddressValidation": {
            "type": "boolean"
          },
          "SkipHouseNumberValidation": {
            "type": "boolean"
          },
          "SkipHouseNumberValidationForCountryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "SetOrdersToClosedOnImport": {
            "type": "boolean"
          },
          "DisableStockReservation": {
            "type": "boolean"
          },
          "DisableAutoOrderCancellation": {
            "type": "boolean"
          },
          "AutomaticallySetPhoneNumberIfEmpty": {
            "type": "string",
            "nullable": true
          },
          "DefaultVatRate": {
            "type": "number",
            "format": "decimal"
          },
          "OrderTooLongOnNewHoursOffset": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SettingsResponse": {
        "type": "object",
        "properties": {
          "Shipment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShipmentSettingsResponse"
              }
            ],
            "nullable": true
          },
          "Advanced": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdvanceSettingsResponse"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VatSettingsResponse": {
        "type": "object",
        "properties": {
          "CountryIso": {
            "type": "string",
            "nullable": true
          },
          "No": {
            "type": "string",
            "nullable": true
          },
          "StandardRate": {
            "type": "number",
            "format": "decimal"
          },
          "ReducedRate": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          },
          "SuperReducedRate": {
            "type": "number",
            "format": "decimal",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantSettingsResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "nullable": true
          },
          "CurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "DefaultCultureCode": {
            "type": "string",
            "nullable": true
          },
          "Settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SettingsResponse"
              }
            ],
            "nullable": true
          },
          "Vat": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VatSettingsResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SingleOfMerchantSettingsResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantSettingsResponse"
              }
            ],
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentLineRequest": {
        "required": [
          "MerchantProductNo",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "MerchantProductNo": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique product reference used by the Merchant (sku)."
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Extra data on the order. Each item must have an unqiue key",
            "nullable": true
          },
          "Quantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of items of the product in the shipment.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentRequest": {
        "required": [
          "Lines",
          "MerchantOrderNo",
          "MerchantShipmentNo"
        ],
        "type": "object",
        "properties": {
          "MerchantShipmentNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipment reference used by the Merchant."
          },
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant."
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineRequest"
            }
          },
          "ExtraData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Extra data on the order. Each item must have an unqiue key",
            "nullable": true
          },
          "TrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipping reference used by the Shipping carrier (track&trace number).",
            "nullable": true
          },
          "TrackTraceUrl": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A link to a page of the carrier where the customer can track the shipping of her package.",
            "nullable": true
          },
          "ReturnTrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.",
            "nullable": true
          },
          "Method": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.",
            "nullable": true
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentTrackingRequest": {
        "required": [
          "Method",
          "TrackTraceNo"
        ],
        "type": "object",
        "properties": {
          "Method": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Shipment method (carrier)."
          },
          "TrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipping reference used by the Shipping carrier (track & trace number)."
          },
          "ReturnTrackTraceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique return shipping reference that may be used by the Shipping carrier (track & trace number) if the shipment is returned.",
            "nullable": true
          },
          "TrackTraceUrl": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A link to a page of the carrier where the customer can track the shipping of her package.",
            "nullable": true
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PackageDimensionsUnit": {
        "enum": [
          "CM",
          "INCH"
        ],
        "type": "string"
      },
      "MerchantShipmentPackageDimensionsRequest": {
        "type": "object",
        "properties": {
          "Height": {
            "type": "number",
            "format": "decimal"
          },
          "Width": {
            "type": "number",
            "format": "decimal"
          },
          "Length": {
            "type": "number",
            "format": "decimal"
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PackageDimensionsUnit"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PackageWeightUnit": {
        "enum": [
          "GRAM",
          "OUNCE"
        ],
        "type": "string"
      },
      "MerchantShipmentPackageWeightRequest": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "number",
            "format": "decimal"
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PackageWeightUnit"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MerchantShipmentLabelCarrierRequest": {
        "required": [
          "Dimensions",
          "Lines",
          "Weight"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineRequest"
            }
          },
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantShipmentPackageDimensionsRequest"
              }
            ]
          },
          "Weight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantShipmentPackageWeightRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ChannelCarrierRecommendationApi": {
        "enum": [
          "NEUTRAL",
          "RECOMMENDED",
          "DISCOMMENDED"
        ],
        "type": "string"
      },
      "ChannelCarrierCollectionMethodApi": {
        "enum": [
          "DROP_OFF",
          "PICK_UP"
        ],
        "type": "string"
      },
      "MerchantShipmentLabelCarrierResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The channel's name for the shipping label carrier",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "description": "The channel's code for the shipping label carrier",
            "nullable": true
          },
          "Restrictions": {
            "type": "string",
            "description": "Optional. Any restrictions on this carriers, e.g. weight and/or dimensions",
            "nullable": true
          },
          "Price": {
            "type": "number",
            "description": "Optional. Price for this shipping label",
            "format": "decimal",
            "nullable": true
          },
          "Recommendation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCarrierRecommendationApi"
              }
            ],
            "description": "Optional. Kind of recommendation from the channel",
            "nullable": true
          },
          "CollectionMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelCarrierCollectionMethodApi"
              }
            ],
            "description": "Optional. Kind of collection method",
            "nullable": true
          },
          "HandoverDateTime": {
            "type": "string",
            "description": "Optional. When to handover the package to the carrier\r\nIt is in the ISO format including the timezone offset.\r\nE.g. 2020-10-03T18:00:00+02:00\r\nwhich is 3rd Oct 2020, at 18:00 PM in Amsterdam (Summer Time aka CEST: UTC +2:00 )",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantShipmentLabelCarrierResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLabelCarrierResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantChannelLabelShipmentRequest": {
        "required": [
          "ChannelMethodCode",
          "Dimensions",
          "Lines",
          "MerchantOrderNo",
          "MerchantShipmentNo",
          "Weight"
        ],
        "type": "object",
        "properties": {
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantShipmentPackageDimensionsRequest"
              }
            ]
          },
          "Weight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantShipmentPackageWeightRequest"
              }
            ]
          },
          "ChannelMethodCode": {
            "type": "string"
          },
          "MerchantShipmentNo": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The unique shipment reference used by the Merchant."
          },
          "MerchantOrderNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique order reference used by the Merchant."
          },
          "ShippedFromCountryCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The code of the country from where the package is being shipped.",
            "nullable": true
          },
          "Lines": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShipmentLineRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantStockLocationResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantStockLocationResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookEventType": {
        "enum": [
          "ORDERS_CREATE",
          "PRODUCTS_CHANGE",
          "RETURNS_CHANGE",
          "SHIPMENTS_CHANGE",
          "NOTIFICATIONS_CREATE",
          "BUNDLE_PRODUCTS_CHANGE"
        ],
        "type": "string"
      },
      "MerchantWebhookResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfMerchantWebhookResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantWebhookResponse"
            },
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "ItemsPerPage": {
            "type": "integer",
            "format": "int32"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "LogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "ValidationErrors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantWebhookRequest": {
        "required": [
          "Events",
          "Name",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The unique webhook name."
          },
          "Url": {
            "maxLength": 1028,
            "minLength": 0,
            "type": "string",
            "description": "The callback URL using by the webhook."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Determining if the webhook should be active and callbacks should proceed or not."
          },
          "Events": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookEventType"
            },
            "description": "Events supported by the webhook."
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "description": "API Key Authentication",
        "name": "apikey",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "apiKey": [ ]
    }
  ],
  "x-version": "2.9.9"
}